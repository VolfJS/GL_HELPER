const { Scenes } = require("telegraf")
const { Keyboard, Key } = require("telegram-keyboard")
const { HTML } = require("puregram")
const { db, Users } = require("../db/connect_db")
const config = require("../config")
const generate_link = require('../pay_link')

const up_balance = new Scenes.WizardScene(
    'up_balance',
    async (ctx) => {
        let back_keyb = Keyboard.make([
            Key.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'menu')
          ]).inline()
      await ctx.editMessageText(`üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (RUB):`, back_keyb);
      return ctx.wizard.next();
    },
    async (ctx) => {
        if(!ctx.callbackQuery) {
            let link = generate_link({
                amount: Number(ctx.message.text),
                desc: "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
                method: "none"
            })
    
          await ctx.reply(`<i>üí≥ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –∏–ª–∏ –∫–Ω–æ–ø–∫–µ.</i>\nüîó –°—Å—ã–ª–∫–∞: ${link}`, {
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üì≤ –û–ø–ª–∞—Ç–∏—Ç—å',
                            url: link
                        },
                    ]
                    ]
            }
        })
        await ctx.reply(`üóí –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:`, {
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üí∞ –°–±–æ—Ä—ã —Å—Ä–µ–¥—Å—Ç–≤',
                            callback_data: 'fundraising'
                        },
                        {
                          text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å',
                          callback_data: 'profile'
                        }
                      ],
                      [
                          {
                              text: "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                              callback_data: 'up_balance'
                          },
                          {
                            text: "‚ûñ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤",
                            callback_data: 'withdraw_balance'
                          }
                      ],
                      [
                        {
                            text: "üÜò –ü–æ–º–æ—â—å",
                            callback_data: 'help'
                        },
                    ]
                    ]
            }
        })
          return ctx.scene.leave();
        }
        if(ctx.callbackQuery.data == 'menu') {
            await ctx.editMessageText(`üóí –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:`, {
                parse_mode: "HTML",
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üí∞ –°–±–æ—Ä—ã —Å—Ä–µ–¥—Å—Ç–≤',
                                callback_data: 'fundraising'
                            },
                            {
                              text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å',
                              callback_data: 'profile'
                            }
                          ],
                          [
                              {
                                  text: "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                                  callback_data: 'up_balance'
                              },
                              {
                                text: "‚ûñ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤",
                                callback_data: 'withdraw_balance'
                              }
                          ],
                          [
                            {
                                text: "üÜò –ü–æ–º–æ—â—å",
                                callback_data: 'help'
                            },
                        ]
                        ]
                }
            })
            return ctx.scene.leave()
        }
    },
)

  module.exports = up_balance