const { Scenes } = require("telegraf")
const { Keyboard, Key } = require("telegram-keyboard")
const { HTML } = require("puregram")
const { Users } = require("../db/connect_db")
const config = require("../config")

const withdraw_balance = new Scenes.WizardScene(
    'withdraw_balance',
    async (ctx) => {
        let back_keyb = Keyboard.make([
            Key.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'menu')
          ]).inline()
      await ctx.editMessageText(`üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞ (RUB):`, back_keyb);
      return ctx.wizard.next();
    },
    async (ctx) => {
        if(!ctx.callbackQuery) {
            let user = await Users.get_sel_one(`where "tgId" = ${ctx.from.id}`)
            ctx.message.text = Number(ctx.message.text)
            if(!Number(ctx.message.text) || ctx.message.text < 1) return ctx.replyWithHTML(`<b>‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ <code>500</code> —Ä—É–±–ª–µ–π –∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!</b>`) 
            if(user.balance < ctx.message.text) return ctx.replyWithHTML(`<b>‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!</b>`)
            ctx.scene.state.num = ctx.message.text
            await ctx.replyWithHTML(`<i>üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:</i>`)
            return ctx.wizard.next();
        }
        if(ctx.callbackQuery.data == 'menu') {
            await ctx.editMessageText(`üóí –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:`, {
                parse_mode: "HTML",
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üí∞ –°–±–æ—Ä—ã —Å—Ä–µ–¥—Å—Ç–≤',
                                callback_data: 'fundraising'
                            },
                            {
                              text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å',
                              callback_data: 'profile'
                            }
                          ],
                          [
                              {
                                  text: "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                                  callback_data: 'up_balance'
                              },
                              {
                                text: "‚ûñ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤",
                                callback_data: 'withdraw_balance'
                              }
                          ],
                          [
                            {
                                text: "üÜò –ü–æ–º–æ—â—å",
                                callback_data: 'help'
                            },
                        ]
                        ]
                }
            })
        }
            return ctx.scene.leave()
    },
    async (ctx) => {
        let back_keyb = Keyboard.make([
            Key.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'menu')
          ]).inline()
          ctx.message.text = Number(ctx.message.text)
          if(!Number(ctx.message.text)) return ctx.replyWithHTML(`<b>‚ùå –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω —á–∏—Å–ª–æ–º!</b>`) 
      await ctx.replyWithHTML(`<b>‚úîÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤.</b>\n<i>‚è∞ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –≤–∞—à—É –∫–∞—Ä—Ç—É.</i>`, back_keyb);
      await ctx.telegram.sendMessage(config.admin_chat, `[–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥]\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - ${HTML.url('—Å—Å—ã–ª–∫–∞', `tg://user?id=${ctx.from.id}`)}\nüíµ –°—É–º–º–∞: ${ctx.scene.state.num}\nüí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ${ctx.message.text}`, { parse_mode: "HTML" })
      await ctx.reply(`üóí –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:`, {
        parse_mode: "HTML",
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: 'üí∞ –°–±–æ—Ä—ã —Å—Ä–µ–¥—Å—Ç–≤',
                        callback_data: 'fundraising'
                    },
                    {
                      text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å',
                      callback_data: 'profile'
                    }
                  ],
                  [
                      {
                          text: "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                          callback_data: 'up_balance'
                      },
                      {
                        text: "‚ûñ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤",
                        callback_data: 'withdraw_balance'
                      }
                  ],
                  [
                    {
                        text: "üÜò –ü–æ–º–æ—â—å",
                        callback_data: 'help'
                    },
                ]
                ]
        }
    })
      return ctx.scene.leave();
    },
)

module.exports = withdraw_balance