const { Scenes } = require("telegraf")
const { Keyboard, Key } = require("telegram-keyboard")
const { HTML } = require("puregram")
const { db, Users } = require("../db/connect_db")
const config = require("../config")

const registration = new Scenes.WizardScene(
    'registration',
    async (ctx) => {
        let agree_keyb = Keyboard.make([
            Key.callback('‚òëÔ∏è –ü—Ä–∏–Ω–∏–º–∞—é', 'accept'),
            Key.callback('‚ùå –ù–µ –ø—Ä–∏–Ω–∏–º–∞—é', 'no_accept')
          ]).inline()
      await ctx.replyWithHTML(`<b>üßæ –í –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –ø–æ–ø—Ä–æ—Å–∏–º –≤–∞—Å –ø—Ä–∏–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ:</b>\n1.1 –ë–ª–∞-–±–ª–∞`, agree_keyb);
      return ctx.wizard.next();
    },
    async (ctx) => {
        if (!ctx.callbackQuery) return ctx.wizard.back();
      ctx.callbackQuery.data == 'accept' 
      ? ctx.editMessageText(`<b>‚úîÔ∏è –í—ã –ø—Ä–∏–Ω—è–ª–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.</b>\n<i>üìù –ü—Ä–æ—Å–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–≤–µ—Å—Ç–∏ –≤–∞—à–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è:</i>`, { parse_mode: "HTML" }) 
      : await ctx.editMessageText(`
      <b>üòï –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.</b>
      <i>üìå –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º —Å–Ω–æ–≤–∞, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.</i>`, { 
          parse_mode: "HTML",
          reply_markup: {
              inline_keyboard: [
              [
                  {
                      text: '‚òëÔ∏è –ü—Ä–∏–Ω–∏–º–∞—é',
                      callback_data: 'accept'
                  }
              ],
              [
                  {
                    text: '‚ùå –ù–µ –ø—Ä–∏–Ω–∏–º–∞—é',
                    callback_data: 'no_accept'
                  }
                ],
              ]
            }
      })
      return ctx.wizard.next();
    },
    async (ctx) => {
        ctx.scene.state.name = ctx.message.text
            await ctx.reply(`<u>üë®‚Äçüéì –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–ø–µ—Ä—å –∫–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –≤ –∫–æ–ª–ª–µ–¥–∂–µ:</u>`, { 
                parse_mode: "HTML" ,
                reply_markup: {
                    inline_keyboard: [
                    [
                        {
                            text: 'üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç',
                            callback_data: 'student'
                        },
                        {
                          text: 'üë©‚Äçüîß –°—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã',
                          callback_data: 'leader'
                        }
                      ],
                      [
                          {
                              text: "üë©‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–ª–ª–µ–¥–∂–∞",
                              callback_data: 'admin_college'
                          }
                      ]
                    ]
                  }
            })
            return ctx.wizard.next();
    },
    async (ctx) => {
        if (!ctx.callbackQuery) return ctx.wizard.back();
        switch (ctx.callbackQuery.data) {
            case "student":
                await ctx.editMessageText(`‚úÖ  –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞—à—É —Ä–æ–ª—å: ¬´üë®‚Äçüéì  –°—Ç—É–¥–µ–Ω—Ç¬ª
üë•  –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–ø–µ—Ä—å –∫ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç–µ:`, {
    parse_mode: "HTML",
    reply_markup: {
        inline_keyboard: [
            [
                {
                    text: '2 –ü–ò',
                    callback_data: '2_pi'
                },
                {
                  text: '3 –ü–ò',
                  callback_data: '3_pi'
                },
                {
                    text: '4 –ü–ò',
                    callback_data: '4_pi'
                  }
              ],
              [
                  {
                      text: "1 –ò–°–ò–ü",
                      callback_data: '1_isip'
                  }
              ],
              [
                {
                    text: "1 –§–ö",
                    callback_data: '1_fk'
                },
                {
                    text: "2 –§–ö",
                    callback_data: '2_fk'
                },
                {
                    text: "3 –§–ö",
                    callback_data: '3_fk'
                },
                {
                    text: "4 –§–ö",
                    callback_data: '4_fk'
                }
            ]
            ]
    }
})
                ctx.scene.state.role = 1
            break;

            case "leader":
                await ctx.editMessageText(`‚úÖ  –í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞—à—É —Ä–æ–ª—å: ¬´üë©‚Äçüîß –°—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã¬ª
üë•  –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–ø–µ—Ä—å –∫ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç–µ:`, {
    parse_mode: "HTML",
    reply_markup: {
        inline_keyboard: [
            [
                {
                    text: '2 –ü–ò',
                    callback_data: '2_pi'
                },
                {
                  text: '3 –ü–ò',
                  callback_data: '3_pi'
                },
                {
                    text: '4 –ü–ò',
                    callback_data: '4_pi'
                  }
              ],
              [
                  {
                      text: "1 –ò–°–ò–ü",
                      callback_data: '1_isip'
                  }
              ],
              [
                {
                    text: "1 –§–ö",
                    callback_data: '1_fk'
                },
                {
                    text: "2 –§–ö",
                    callback_data: '2_fk'
                },
                {
                    text: "3 –§–ö",
                    callback_data: '3_fk'
                },
                {
                    text: "4 –§–ö",
                    callback_data: '4_fk'
                }
            ]
            ]
    }
})
                ctx.scene.state.role = 2
            break;

            case "admin_college":
                let keyb = Keyboard.make([
                    Key.callback('‚òëÔ∏è –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ', 'req_admin'),
                    Key.callback('‚ùå –ù–µ—Ç', 'no_req_admin')
                  ]).inline()
               await ctx.editMessageText(`‚ùóÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\nüìõ –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —ç—Ç—É —Ä–æ–ª—å, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.\n‚ùì –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∫–æ–ª–ª–µ–¥–∂–∞?`, keyb)
            break;
        }
      return ctx.wizard.next();
    },

    async (ctx) => {
        if (!ctx.callbackQuery) return ctx.wizard.back();
        if(ctx.callbackQuery.data = 'req_admin') {
            await ctx.telegram.sendMessage(config.admin_chat, `[–ó–ê–Ø–í–ö–ê] –í–æ–∑–º–æ–∂–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${HTML.url('—Å—Å—ã–ª–∫–∞', `tg://user?id=${ctx.from.id}`)}
‚ÑπÔ∏è –ò–º—è: ${ctx.scene.state.name}
            `, {
                parse_mode: "HTML",
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚òëÔ∏è –ü—Ä–∏–Ω—è—Ç—å',
                                callback_data: 'accept_admin'
                            }
                          ],
                          [
                              {
                                  text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                                  callback_data: 'not_accept_admin'
                              }
                          ],
                        ]
                }
            })
            await ctx.editMessageText(`<b>üì© –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç.</b>\n<i>üì¢ –ö–æ–≥–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–π–º–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –º—ã –≤–∞—Å —É–≤–µ–¥–æ–º–∏–º.</i>`, { parse_mode: "HTML" })
            return ctx.scene.leave()
        } else if(ctx.callbackQuery.data = 'no_req_admin') {
            await ctx.editMessageText(`‚ùóÔ∏è –¢–µ–ø–µ—Ä—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –≤—ã –¥–æ–ª–∂–Ω—ã –±—É–¥–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –µ—ë –∑–∞–Ω–æ–≤–æ.\n–ö–∞–∫ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start –≤ –¥–∞–Ω–Ω—ã–π —á–∞—Ç.`)
            return ctx.scene.leave()
        }
        if(ctx.scene.state.role == 1) {
      await ctx.editMessageText(`<b>‚ú® –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</b>\nüóí –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:`, {
        parse_mode: "HTML",
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: 'üí∞ –°–±–æ—Ä—ã —Å—Ä–µ–¥—Å—Ç–≤',
                        callback_data: 'fundraising'
                    },
                    {
                      text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å',
                      callback_data: 'profile'
                    }
                  ],
                  [
                      {
                          text: "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                          callback_data: 'up_balance'
                      }
                  ],
                  [
                    {
                        text: "üÜò –ü–æ–º–æ—â—å",
                        callback_data: 'help'
                    },
                ]
                ]
        }
    })
    await db.query(`UPDATE users SET group_name = ${ctx.callbackQuery.data}, name = ${ctx.scene.state.name} WHERE "tgId" = ${ctx.from.id}`)
} else if(ctx.scene.state.role == 2) {
    await ctx.editMessageText(`<b>‚ú® –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</b>\nüóí –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:`, {
        parse_mode: "HTML",
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: 'üí∞ –°–±–æ—Ä—ã —Å—Ä–µ–¥—Å—Ç–≤',
                        callback_data: 'fundraising'
                    },
                    {
                      text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å',
                      callback_data: 'profile'
                    }
                  ],
                  [
                      {
                          text: "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                          callback_data: 'up_balance'
                      },
                      {
                        text: "‚ûñ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤",
                        callback_data: 'withdraw_balance'
                      }
                  ],
                  [
                    {
                        text: "üÜò –ü–æ–º–æ—â—å",
                        callback_data: 'help'
                    },
                ]
                ]
        }
    })
    await db.query(`UPDATE users SET group_name = ${ctx.callbackQuery.data}, name = ${ctx.scene.state.name}, role = 2 WHERE "tgId" = ${ctx.from.id}`)
}
      return ctx.scene.leave();
    },
  );

  module.exports = registration