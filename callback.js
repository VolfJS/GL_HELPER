const { db, Users } = require("./db/connect_db")
const botinfo = require("./botinfo.json")

async function callback(ctx) {
    // –∫–æ–º–∞–Ω–¥—ã
    switch (ctx.update.callback_query.data) {
      case "fundraising":
        
        let user = await Users.get_sel_one(`where "tgId" = ${ctx.from.id}`)
        if(user.role == 2) {
        await ctx.editMessageText(`–í—ã —Å—Ç–∞—Ä–æ—Å—Ç–∞ –∏ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å–±–æ—Ä—ã —Å—Ä–µ–¥—Å—Ç–≤.`, {
          parse_mode: "HTML",
          reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä',
                    callback_data: 'add_fund'
                }
                ],
                  [
                      {
                          text: 'üîô –ù–∞–∑–∞–¥',
                          callback_data: 'menu'
                      }
                    ]
                  ]
          }
      })
    } else if(user.role == 1) {
      let all_donates = await db.sel_list(`* from donates`)
      try {
      all_donates.filter(x => x.group_name == user.group_name).map(async x => {
        if(!x) await ctx.editMessageText(`–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–±–æ—Ä–∞ —Å—Ä–µ–¥—Å—Ç–≤.`, {
          parse_mode: "HTML",
          reply_markup: {
              inline_keyboard: [
                  [
                      {
                          text: 'üîô –ù–∞–∑–∞–¥',
                          callback_data: 'menu'
                      }
                    ]
                  ]
          }
      })
        await ctx.reply(`ID —Å–±–æ—Ä–∞: ${x.id}\n–ù–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞: ${x.name_donates}\n–°—É–º–º–∞ —Å–±–æ—Ä–∞: ${x.all_sum}\n–í—ã –¥–æ–ª–∂–Ω—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å: ${x.sum_one_user}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–±–æ—Ä–∞: —á–µ—Ä–µ–∑ ${x.date_end} –¥–Ω–µ–π`)
      })
    } catch (e) {
      console.error(e)
      await ctx.editMessageText(`–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–±–æ—Ä–∞ —Å—Ä–µ–¥—Å—Ç–≤.`, {
        parse_mode: "HTML",
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: 'üîô –ù–∞–∑–∞–¥',
                        callback_data: 'menu'
                    }
                  ]
                ]
        }
    })
    }

    }
      break;

      case "menu":
         await ctx.editMessageText(`üóí –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:`, {
          parse_mode: "HTML",
          reply_markup: {
              inline_keyboard: [
                  [
                      {
                          text: 'üí∞ –°–±–æ—Ä—ã —Å—Ä–µ–¥—Å—Ç–≤',
                          callback_data: 'fundraising'
                      },
                      {
                        text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å',
                        callback_data: 'profile'
                      }
                    ],
                    [
                        {
                            text: "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                            callback_data: 'up_balance'
                        },
                        {
                          text: "‚ûñ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤",
                          callback_data: 'withdraw_balance'
                        }
                    ],
                    [
                      {
                          text: "üÜò –ü–æ–º–æ—â—å",
                          callback_data: 'help'
                      },
                  ]
                  ]
          }
      })
      break;

      case "profile":
        await ctx.editMessageText(`üÜî ID: <code>${user.id}</code>\nüè∑ –ò–º—è: <i>${user.name}</i>\nüë• –ì—Ä—É–ø–ø–∞: <b>${user.group_name == '2pi' ? `2 –ü–ò` : user.group_name == '3pi' ? `3 –ü–ò` : user.group_name == '4pi' ? `4 –ü–ò` : user.group_name == '1fk' ? `1 –§–ö` : user.group_name == '2fk' ? `2 –§–ö` : user.group_name == '3fk' ? `3 –§–ö` : user.group_name == '4fk' ? `4 –§–ö` : `1 –ò—Å–ò–ü`}</b>\nüöπ –†–æ–ª—å: ${user.role == 1 ? `—Å—Ç—É–¥–µ–Ω—Ç` : user.role == 2 ? `—Å—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã` : `–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è`}\nüí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance} RUB\n\nüìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <code>${user.date}</code>`, {
          parse_mode: "HTML",
          reply_markup: {
              inline_keyboard: [
                  [
                      {
                          text: 'üîô –ù–∞–∑–∞–¥',
                          callback_data: 'menu'
                      }
                    ]
                  ]
          }
      })
      break;

      case "help":
        await ctx.editMessageText(`‚ùóÔ∏è –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É - t.me/wolfjs`, {
          parse_mode: "HTML",
          reply_markup: {
              inline_keyboard: [
                  [
                      {
                          text: 'üîô –ù–∞–∑–∞–¥',
                          callback_data: 'menu'
                      }
                    ]
                  ]
          }
      })
      break;

      case "mailing":
         await ctx.scene.enter('mailing')
      break;

      case "withdraw_balance":
         await ctx.scene.enter("withdraw_balance")
      break;

      case "up_balance": 
        await ctx.scene.enter("up_balance")
      break;

      case "project_stats":
        await ctx.editMessageText(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:\n\nüë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${await db.get_count(`users`)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\nüí∏ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: ${botinfo.total_replenish} RUB\n‚öí –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: ${botinfo.developer}\n\nüìÜ –°—Ç–∞—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞: 19.12.2021`)
      break;

      case "edit_api_key":
       await ctx.scene.enter("edit_api_key")
      break;

      case "edit_id_project":
      await ctx.scene.enter("edit_id_project")
      break;

      case "add_fund":
      await ctx.scene.enter("add_fund")
      break;
    }
}

module.exports = callback;