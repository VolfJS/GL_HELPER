const {
    Telegraf,
    session,
    Scenes,
    Context
  } = require("telegraf")
  
  const { db, Users } = require("./db/connect_db")
  
  async function callback(ctx) {
      // –∫–æ–º–∞–Ω–¥—ã
  
      switch (ctx.update.callback_query.data) {
        case "fundraising":
          await ctx.editMessageText(`–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–±–æ—Ä–∞ —Å—Ä–µ–¥—Å—Ç–≤.`, {
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üîô –ù–∞–∑–∞–¥',
                            callback_data: 'menu'
                        }
                      ]
                    ]
            }
        })
        break;
  
        case "menu":
           await ctx.editMessageText(`üóí –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:`, {
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üí∞ –°–±–æ—Ä—ã —Å—Ä–µ–¥—Å—Ç–≤',
                            callback_data: 'fundraising'
                        },
                        {
                          text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å',
                          callback_data: 'profile'
                        }
                      ],
                      [
                          {
                              text: "‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                              callback_data: 'up_balance'
                          },
                          {
                            text: "‚ûñ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤",
                            callback_data: 'withdraw_balance'
                          }
                      ],
                      [
                        {
                            text: "üÜò –ü–æ–º–æ—â—å",
                            callback_data: 'help'
                        },
                    ]
                    ]
            }
        })
        break;
  
        case "profile":
          let user = await Users.get_sel_one(`where "tgId" = ${ctx.from.id}`)
          await ctx.editMessageText(`üÜî ID: <code>${user.id}</code>\nüè∑ –ò–º—è: <i>${user.name}</i>\nüë• –ì—Ä—É–ø–ø–∞: <b>${user.group_name == '2pi' ? `2 –ü–ò` : user.group_name == '3pi' ? `3 –ü–ò` : user.group_name == '4pi' ? `4 –ü–ò` : user.group_name == '1fk' ? `1 –§–ö` : user.group_name == '2fk' ? `2 –§–ö` : user.group_name == '3fk' ? `3 –§–ö` : user.group_name == '4fk' ? `4 –§–ö` : `1 –ò—Å–ò–ü`}</b>\nüöπ –†–æ–ª—å: ${user.role == 1 ? `—Å—Ç—É–¥–µ–Ω—Ç` : user.role == 2 ? `—Å—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã` : `–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è`}\n\nüìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <code>${user.date}</code>`, {
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üîô –ù–∞–∑–∞–¥',
                            callback_data: 'menu'
                        }
                      ]
                    ]
            }
        })
        break;
  
        case "help":
          await ctx.editMessageText(`‚ùóÔ∏è –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É - t.me/wolfjs`, {
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üîô –ù–∞–∑–∞–¥',
                            callback_data: 'menu'
                        }
                      ]
                    ]
            }
        })
        break;
  
        case "up_balance":
         await ctx.editMessageText(`–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`, {
          parse_mode: "HTML",
          reply_markup: {
              inline_keyboard: [
                  [
                      {
                          text: 'üîô –ù–∞–∑–∞–¥',
                          callback_data: 'menu'
                      }
                    ]
                  ]
          }
      })
        break;
  
        case "withdraw_balance":
        await ctx.editMessageText(`–ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`, {
          parse_mode: "HTML",
          reply_markup: {
              inline_keyboard: [
                  [
                      {
                          text: 'üîô –ù–∞–∑–∞–¥',
                          callback_data: 'menu'
                      }
                    ]
                  ]
          }
      })
        break;
      }
  }
  
  module.exports = callback;